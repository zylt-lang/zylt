(let* ((tbladdr 0) (tbllst (list 0)) (pgaddr 0) (looppoint NIL))

; ---[Error Handling]---
(defun ngerror (val)
  (princ val)
  (terpri)
  (exit) )

; ---[Zylt Function Processing]---
(defun $+- (n cardata cdrdata cartmp flg)
  (cond ((= n tbladdr)
           (progn
             (setq cartmp (reverse cartmp))
             (cond ((eq flg '+) (setq cardata (+ cardata 1)))
                   (t (setq cardata (- cardata 1))) )
             (setq tbllst (append cartmp (cons cardata cdrdata)))) )
        ((>= n (length tbllst)) (princ "no tbladdr"))
        (t ($+- (+ n 1) (car cdrdata) (cdr cdrdata) (cons cardata cartmp) flg)) ))

(defun $~~ (n val cardata cdrdata cartmp)	; -> val is the next value of $~ (Memo)
  (cond ((= n tbladdr)
           (progn
             (setq cartmp (reverse cartmp))
             (setq tbllst (append cartmp (cons val cdrdata)))) )
        ((>= n (length tbllst)) (princ "no tbladdr"))
        (t ($~~ (+ n 1) val (car cdrdata) (cdr cdrdata) (cons cardata cartmp))) ))

; $[ $] $@ are replaced with $_ at the start of processing (Make it unusable after one use)
(defun relist (cnt n cardata)
  (let ((val (car pglstbk)) (cartmp cardata))
    (setq pglstbk (cdr pglstbk))
    (cond ((= cnt n)
             (progn
               (setq cartmp (reverse cartmp))
               (setq pglstbk (append cartmp (cons '$_ pglstbk)))))
          (t (relist (+ cnt 1) n (cons val cartmp))) )))

; Convert decimal to hexadecimal
(defun dec2hex (val)
  (cond ((and (> val 0) (< val 128))
           (progn
             (format t "~x" val)
             (princ " ")))
        (t (ngerror "no hexdata"))) )

; Allows setting tbllst from a file in bulk (File name is fixed)
(defun read-file ()
  (with-open-file (fp  "import.dat" :direction :input) (read fp)) )

; Outputs tbllst to a file (File name is fixed)
(defun write-file ()
  (with-open-file (fp "export.dat" :direction :output :if-exists :supersede) (princ tbllst fp)) )

; ---[Zylt Processing Function Definitions]---
(defun $> ()								; Similar to [>]
  (progn 
    (setq tbllst (reverse (cons 0 (reverse tbllst))))
    (setq tbladdr (+ tbladdr 1))) )
(defun $< ()								; Similar to [<]
  (setq tbladdr (- tbladdr 1)) )
(defun $+ ()								; Similar to [+]
  ($+- 0 (car tbllst) (cdr tbllst) NIL '+) )
(defun $- ()								; Similar to [-]
  ($+- 0 (car tbllst) (cdr tbllst) NIL '-) )
(defun $. ()								; Similar to [.]（Convert to COM file format）
  (let ((val (nth tbladdr tbllst)))
    (progn
      (princ "B4 02 B2 ")
      (dec2hex val)
      (princ "CD 21 ")) ))
(defun $~ ()								; Similar to [,] ( ($, 20) allows writing "20" [,] cannot be used)
  (progn
    ($~~ 0 (car pglst) (car tbllst) (cdr tbllst) NIL)
    (setq pgaddr (+ pgaddr 1))
    (setq pglst (cdr pglst))) )
(defun $_ ()								; Similar to nop
   )
(defun $[ ()								; Similar to [[]
  (progn
    (setq looppoint (cons pgaddr looppoint))	; -> Memorize the position of $[
    (relist 0 pgaddr NIL)) )
(defun $] ()								; Similar to []]
  (progn
    (relist 0 pgaddr NIL)
    (setq pglst pglstbk)
    (setq pgaddr (car looppoint))
    (setq pglst (nthcdr pgaddr pglst))
    (setq pgaddr (- pgaddr 1))) )	; -> Without this, multiple $] will cause an infinite loop
(defun $@ ()								; Similar to goto
  (let ((tmppgaddr 0))
    (progn
      (setq tmppgaddr (car pglst))
      (cond ((>= tmppgaddr (length pglstbk)) (ngerror "Program out of range"))
            (t (progn
                 (relist 0 pgaddr NIL)
                 (relist 0 (+ pgaddr 1) NIL)
                 (setq pglst pglstbk)
                 (setq pgaddr tmppgaddr)
                 (setq pglst (nthcdr pgaddr pglst))
                 (setq pgaddr (- pgaddr 1)))))) ))
(defun $? ()								; Similar to cmp (Compares the first element of tbllst [Match]: Jump to the next value's program position, [Mismatch]: Proceed to the next program)
  (let ((val (car tbllst)))
    (cond ((eq val (nth tbladdr tbllst))
             (progn
               (setq pgaddr (car pglst))
               (setq pglst (nthcdr pgaddr pglstbk))
               (setq pgaddr (- pgaddr 1))))
          (t (progn
               (setq pglst (cdr pglst))
               (setq pgaddr (+ pgaddr 1)))) ) ))
(defun $% ()								; Moves to the specified table position (Enables array-like usage such as X[position]=value)
  (let ((val (car pglst)))
    (progn
      (setq tbladdr val)
      (setq pgaddr (+ pgaddr 1))
      (setq pglst (cdr pglst))) ) )
(defun $i ()								; Similar to import (Sets table values in bulk)
  (setq tbllst (read-file)) )
(defun $e ()								; Similar to export (Outputs table values in bulk)
  (write-file) )
(defun -- ()								; Similar to comment
  (progn
    (relist 0 pgaddr NIL)
    (relist 0 (+ pgaddr 1) NIL)
    (setq pgaddr (+ pgaddr 1))
    (setq pglst (cdr pglst))) )

; ---[Process Zylt Program]---
(defun pgrun ()
  (let ((val (car pglst)))
    (setq pglst (cdr pglst))

    (cond ((eq val '$>) ($>))		; Similar to [>]
          ((eq val '$<) ($<))		; Similar to [<]
          ((eq val '$+) ($+))		; Similar to [+]
          ((eq val '$-) ($-))		; Similar to [-]
          ((eq val '$.) ($.))		; Similar to [.]
          ((eq val '$~) ($~))		; Similar to [,] ( ($, 20) allows writing "20")
          ((eq val '$_) ($_))		; Similar to nop
          ((eq val '$[) ($[))		; Similar to [[]
          ((eq val '$]) ($]))		; Similar to []]
          ((eq val '$@) ($@))		; Similar to goto
          ((eq val '$?) ($?))		; Similar to cmp (Compares the first element of tbllst [Match]: Jump to the next value's program position, [Mismatch]: Proceed to the next program)
          ((eq val '$%) ($%))		; Moves to the specified table position
          ((eq val '$i) ($i))		; Similar to import
          ((eq val '$e) ($e))		; Similar to export
          ((eq val '--) (--))		; Similar to comment（Surround with double quotes）
          ((eq val NIL) (exit))		; Exit
          ((eq (numberp val) T) (ngerror "Numeric value"))	; Numbers other than arguments are treated as errors
          (t (ngerror "Syntax error")) )

;    (print pgaddr)

    (setq pgaddr (+ pgaddr 1))	; -> Program position

    (cond ((not (eq (car pglst) NIL)) (pgrun)) )

))

; ---[Call Zylt Processing Function]---
(pgrun)
(princ "B4 4C B0 00 CD 21")
(terpri)
)
